{"ast":null,"code":"import _slicedToArray from \"/Users/skarlso/goprojects/staple/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/skarlso/goprojects/staple/frontend/src/containers/ResetPassword.js\";\nimport React, { useState } from \"react\";\nimport \"./ResetPassword.css\";\nimport config from \"../config\";\nimport { ControlLabel, FormControl, FormGroup, HelpBlock } from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\nexport default function ResetPassword(props) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isVerifying = _useState2[0],\n        setIsVerifying = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isLoading = _useState4[0],\n        setIsLoading = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        email = _useState6[0],\n        setEmail = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        code = _useState8[0],\n        setCode = _useState8[1];\n\n  function validateForm() {\n    return email.length > 0;\n  }\n\n  function validateConfirmationForm() {\n    return code.length > 0;\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    try {\n      fetch(config.HOST + '/reset', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: email\n        })\n      }).then(response => {\n        if (response.status === 200) {\n          setIsVerifying(true);\n        } else {\n          alert(\"Response was: \" + response.statusText);\n        }\n      }).catch(error => {\n        alert(error.message);\n      });\n    } catch (e) {\n      alert(e.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  async function handleConfirmationSubmit(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    try {\n      fetch(config.HOST + '/verify', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: email,\n          code: code\n        })\n      }).then(response => {\n        if (response.status === 200) {\n          alert(\"Please log in with your new password.\");\n          setIsVerifying(false);\n          props.history.push(\"/\");\n        } else {\n          alert(\"Confirmation code did not match.\");\n        }\n      }).catch(error => {\n        alert(error.message);\n      });\n    } catch (e) {\n      alert(e.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  function renderConfirmationForm() {\n    return React.createElement(\"form\", {\n      onSubmit: handleConfirmationSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      controlId: \"confirmationCode\",\n      bsSize: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(ControlLabel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Confirmation Code\"), React.createElement(FormControl, {\n      autoFocus: true,\n      type: \"text\",\n      onChange: setCodeField,\n      value: code,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(HelpBlock, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Please check your email for the code.\")), React.createElement(LoaderButton, {\n      block: true,\n      type: \"submit\",\n      bsSize: \"large\",\n      isLoading: isLoading,\n      disabled: !validateConfirmationForm(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Verify\"));\n  }\n\n  function setEmailField(event) {\n    setEmail(event.target.value);\n  }\n\n  function setCodeField(event) {\n    setCode(event.target.value);\n  }\n\n  function renderForm() {\n    return React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      controlId: \"email\",\n      bsSize: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(ControlLabel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Email\"), React.createElement(FormControl, {\n      autoFocus: true,\n      type: \"email\",\n      value: email,\n      onChange: setEmailField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    })), React.createElement(LoaderButton, {\n      block: true,\n      type: \"submit\",\n      bsSize: \"large\",\n      isLoading: isLoading,\n      disabled: !validateForm(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Reset Password\"));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"ResetPassword\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, isVerifying ? renderConfirmationForm() : renderForm());\n}","map":{"version":3,"sources":["/Users/skarlso/goprojects/staple/frontend/src/containers/ResetPassword.js"],"names":["React","useState","config","ControlLabel","FormControl","FormGroup","HelpBlock","LoaderButton","ResetPassword","props","isVerifying","setIsVerifying","isLoading","setIsLoading","email","setEmail","code","setCode","validateForm","length","validateConfirmationForm","handleSubmit","event","preventDefault","fetch","HOST","method","headers","body","JSON","stringify","then","response","status","alert","statusText","catch","error","message","e","handleConfirmationSubmit","history","push","renderConfirmationForm","setCodeField","setEmailField","target","value","renderForm"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport \"./ResetPassword.css\";\nimport config from \"../config\";\nimport {ControlLabel, FormControl, FormGroup, HelpBlock} from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\n\nexport default function ResetPassword(props) {\n  const [isVerifying, setIsVerifying] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [email, setEmail] = useState('');\n  const [code, setCode] = useState('');\n\n  function validateForm() {\n    return email.length > 0;\n  }\n\n  function validateConfirmationForm() {\n    return code.length > 0;\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n\n    setIsLoading(true);\n\n    try {\n      fetch(config.HOST+'/reset', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: email,\n        }),\n      }).then((response) => {\n        if (response.status === 200) {\n          setIsVerifying(true);\n        } else {\n          alert(\"Response was: \" + response.statusText);\n        }\n      }).catch((error) => {\n          alert(error.message);\n      })\n    } catch (e) {\n      alert(e.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  async function handleConfirmationSubmit(event) {\n    event.preventDefault();\n\n    setIsLoading(true);\n\n    try {\n      fetch(config.HOST+'/verify', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: email,\n          code: code,\n        }),\n      }).then((response) => {\n        if (response.status === 200) {\n          alert(\"Please log in with your new password.\");\n          setIsVerifying(false);\n          props.history.push(\"/\");\n        } else {\n          alert(\"Confirmation code did not match.\");\n        }\n      }).catch((error) => {\n        alert(error.message);\n      });\n    } catch (e) {\n      alert(e.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  function renderConfirmationForm() {\n    return (\n      <form onSubmit={handleConfirmationSubmit}>\n        <FormGroup controlId=\"confirmationCode\" bsSize=\"large\">\n          <ControlLabel>Confirmation Code</ControlLabel>\n          <FormControl\n            autoFocus\n            type=\"text\"\n            onChange={setCodeField}\n            value={code}\n          />\n          <HelpBlock>Please check your email for the code.</HelpBlock>\n        </FormGroup>\n        <LoaderButton\n          block\n          type=\"submit\"\n          bsSize=\"large\"\n          isLoading={isLoading}\n          disabled={!validateConfirmationForm()}\n        >\n          Verify\n        </LoaderButton>\n      </form>\n    );\n  }\n\n  function setEmailField(event) {\n    setEmail(event.target.value)\n  }\n\n  function setCodeField(event) {\n    setCode(event.target.value)\n  }\n\n  function renderForm() {\n    return (\n      <form onSubmit={handleSubmit}>\n        <FormGroup controlId=\"email\" bsSize=\"large\">\n          <ControlLabel>Email</ControlLabel>\n          <FormControl\n            autoFocus\n            type=\"email\"\n            value={email}\n            onChange={setEmailField}\n          />\n        </FormGroup>\n        <LoaderButton\n          block\n          type=\"submit\"\n          bsSize=\"large\"\n          isLoading={isLoading}\n          disabled={!validateForm()}\n        >\n          Reset Password\n        </LoaderButton>\n      </form>\n    );\n  }\n  return (\n    <div className=\"ResetPassword\">\n      {isVerifying ? renderConfirmationForm() : renderForm()}\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}