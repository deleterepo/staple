{"ast":null,"code":"import _slicedToArray from \"/Users/skarlso/goprojects/staple/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/skarlso/goprojects/staple/frontend/src/containers/ResetPassword.js\";\nimport React, { useState } from \"react\";\nimport \"./ResetPassword.css\";\nimport { useFormFields } from \"../libs/hooksLib\";\nimport config from \"../config\";\nimport { ControlLabel, FormControl, FormGroup, HelpBlock } from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\nexport default function ResetPassword(props) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isVerifying = _useState2[0],\n        setIsVerifying = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isLoading = _useState4[0],\n        setIsLoading = _useState4[1];\n\n  const _useFormFields = useFormFields({\n    email: \"\",\n    code: \"\"\n  }),\n        _useFormFields2 = _slicedToArray(_useFormFields, 2),\n        fields = _useFormFields2[0],\n        handleFieldChange = _useFormFields2[1];\n\n  function validateForm() {\n    return fields.email.length > 0;\n  }\n\n  function validateConfirmationForm() {\n    return fields.code.length > 0;\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    try {\n      fetch(config.HOST + '/reset', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: fields.email\n        })\n      }).then(response => {\n        if (response.status === 200) {\n          setIsVerifying(true);\n        } else {\n          alert(\"Response was: \" + response.statusText);\n        }\n      }).catch(error => {\n        alert(error.message);\n      });\n    } catch (e) {\n      alert(e.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  async function handleConfirmationSubmit(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    try {\n      fetch(config.HOST + '/reset', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: fields.email,\n          code: fields.code\n        })\n      }).then(response => {\n        if (response.status === 200) {\n          props.userHasAuthenticated(true);\n          props.history.push(\"/\");\n        } else {\n          alert(\"Response was: \" + response.statusText);\n        }\n      }).catch(error => {\n        alert(error.message);\n      });\n    } catch (e) {\n      alert(e.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  function renderConfirmationForm() {\n    return React.createElement(\"form\", {\n      onSubmit: handleConfirmationSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      controlId: \"confirmationCode\",\n      bsSize: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(ControlLabel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Confirmation Code\"), React.createElement(FormControl, {\n      autoFocus: true,\n      type: \"tel\",\n      onChange: handleFieldChange,\n      value: fields.code,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(HelpBlock, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Please check your email for the code.\")), React.createElement(LoaderButton, {\n      block: true,\n      type: \"submit\",\n      bsSize: \"large\",\n      isLoading: isLoading,\n      disabled: !validateConfirmationForm(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Verify\"));\n  }\n\n  function renderForm() {\n    return React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      controlId: \"email\",\n      bsSize: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(ControlLabel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Email\"), React.createElement(FormControl, {\n      autoFocus: true,\n      type: \"email\",\n      value: fields.email,\n      onChange: handleFieldChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    })), React.createElement(LoaderButton, {\n      block: true,\n      type: \"submit\",\n      bsSize: \"large\",\n      isLoading: isLoading,\n      disabled: !validateForm(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Reset Password\"));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"Signup\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, isVerifying ? renderConfirmationForm() : renderForm());\n}","map":{"version":3,"sources":["/Users/skarlso/goprojects/staple/frontend/src/containers/ResetPassword.js"],"names":["React","useState","useFormFields","config","ControlLabel","FormControl","FormGroup","HelpBlock","LoaderButton","ResetPassword","props","isVerifying","setIsVerifying","isLoading","setIsLoading","email","code","fields","handleFieldChange","validateForm","length","validateConfirmationForm","handleSubmit","event","preventDefault","fetch","HOST","method","headers","body","JSON","stringify","then","response","status","alert","statusText","catch","error","message","e","handleConfirmationSubmit","userHasAuthenticated","history","push","renderConfirmationForm","renderForm"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport \"./ResetPassword.css\";\nimport {useFormFields} from \"../libs/hooksLib\";\nimport config from \"../config\";\nimport {ControlLabel, FormControl, FormGroup, HelpBlock} from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\n\nexport default function ResetPassword(props) {\n  const [isVerifying, setIsVerifying] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [fields, handleFieldChange] = useFormFields({\n    email: \"\",\n    code: \"\",\n  });\n\n  function validateForm() {\n    return fields.email.length > 0;\n  }\n\n  function validateConfirmationForm() {\n    return fields.code.length > 0;\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n\n    setIsLoading(true);\n\n    try {\n      fetch(config.HOST+'/reset', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: fields.email,\n        }),\n      }).then((response) => {\n        if (response.status === 200) {\n          setIsVerifying(true);\n        } else {\n          alert(\"Response was: \" + response.statusText);\n        }\n      }).catch((error) => {\n          alert(error.message);\n      })\n    } catch (e) {\n      alert(e.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  async function handleConfirmationSubmit(event) {\n    event.preventDefault();\n\n    setIsLoading(true);\n    \n    try {\n      fetch(config.HOST+'/reset', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: fields.email,\n          code: fields.code,\n        }),\n      }).then((response) => {\n        if (response.status === 200) {\n          props.userHasAuthenticated(true);\n          props.history.push(\"/\");\n        } else {\n          alert(\"Response was: \" + response.statusText);\n        }\n      }).catch((error) => {\n        alert(error.message);\n      });\n    } catch (e) {\n      alert(e.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  function renderConfirmationForm() {\n    return (\n      <form onSubmit={handleConfirmationSubmit}>\n        <FormGroup controlId=\"confirmationCode\" bsSize=\"large\">\n          <ControlLabel>Confirmation Code</ControlLabel>\n          <FormControl\n            autoFocus\n            type=\"tel\"\n            onChange={handleFieldChange}\n            value={fields.code}\n          />\n          <HelpBlock>Please check your email for the code.</HelpBlock>\n        </FormGroup>\n        <LoaderButton\n          block\n          type=\"submit\"\n          bsSize=\"large\"\n          isLoading={isLoading}\n          disabled={!validateConfirmationForm()}\n        >\n          Verify\n        </LoaderButton>\n      </form>\n    );\n  }\n\n  function renderForm() {\n    return (\n      <form onSubmit={handleSubmit}>\n        <FormGroup controlId=\"email\" bsSize=\"large\">\n          <ControlLabel>Email</ControlLabel>\n          <FormControl\n            autoFocus\n            type=\"email\"\n            value={fields.email}\n            onChange={handleFieldChange}\n          />\n        </FormGroup>\n        <LoaderButton\n          block\n          type=\"submit\"\n          bsSize=\"large\"\n          isLoading={isLoading}\n          disabled={!validateForm()}\n        >\n          Reset Password\n        </LoaderButton>\n      </form>\n    );\n  }\n  return (\n    <div className=\"Signup\">\n      {isVerifying ? renderConfirmationForm() : renderForm()}\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}