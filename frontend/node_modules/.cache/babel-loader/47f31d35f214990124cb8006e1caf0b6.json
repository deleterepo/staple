{"ast":null,"code":"import _regeneratorRuntime from\"/Users/skarlso/goprojects/staple/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _slicedToArray from\"/Users/skarlso/goprojects/staple/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{FormGroup,FormControl,ControlLabel}from\"react-bootstrap\";import LoaderButton from\"../components/LoaderButton\";import{useFormFields}from\"../libs/hooksLib\";import\"./Login.css\";import Cookie from\"js-cookie\";import config from\"../config\";export default function Login(props){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isLoading=_useState2[0],setIsLoading=_useState2[1];var _useFormFields=useFormFields({email:\"\",password:\"\"}),_useFormFields2=_slicedToArray(_useFormFields,2),fields=_useFormFields2[0],handleFieldChange=_useFormFields2[1];function validateForm(){return fields.email.length>0&&fields.password.length>0;}function handleSubmit(event){return _regeneratorRuntime.async(function handleSubmit$(_context){while(1){switch(_context.prev=_context.next){case 0:event.preventDefault();setIsLoading(true);try{// await Auth.signIn(email, password);\n// fields.email; fields.password --> This is what I will need to pass down the chain.\nfetch(config.HOST+'/get-token',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email:fields.email,password:fields.password})}).then(function(response){if(response.ok){response.json().then(function(responseJson){// store the token in a cookie.\nCookie.set(\"token\",responseJson.token);props.userHasAuthenticated(true);});}else{alert(\"Login failed.\");}}).catch(function(error){alert(error.message);});// probably will create a state and store it in state/\n}catch(e){alert(e.message);}finally{setIsLoading(false);}// If everything worked out fine, we should get back the JWT token and store it for further api calls.\ncase 3:case\"end\":return _context.stop();}}});}return React.createElement(\"div\",{className:\"Login\"},React.createElement(\"form\",null,React.createElement(FormGroup,{controlId:\"email\",bsSize:\"large\"},React.createElement(ControlLabel,null,\"Email\"),React.createElement(FormControl,{autoFocus:true,type:\"email\",value:fields.email,onChange:handleFieldChange})),React.createElement(FormGroup,{controlId:\"password\",bsSize:\"large\"},React.createElement(ControlLabel,null,\"Password\"),React.createElement(FormControl,{value:fields.password,onChange:handleFieldChange,type:\"password\"})),React.createElement(LoaderButton,{block:true,type:\"submit\",bsSize:\"large\",isLoading:isLoading,disabled:!validateForm(),onClick:handleSubmit},\"Login\")));}","map":{"version":3,"sources":["/Users/skarlso/goprojects/staple/frontend/src/containers/Login.js"],"names":["React","useState","FormGroup","FormControl","ControlLabel","LoaderButton","useFormFields","Cookie","config","Login","props","isLoading","setIsLoading","email","password","fields","handleFieldChange","validateForm","length","handleSubmit","event","preventDefault","fetch","HOST","method","headers","body","JSON","stringify","then","response","ok","json","responseJson","set","token","userHasAuthenticated","alert","catch","error","message","e"],"mappings":"uTAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,SAAT,CAAoBC,WAApB,CAAiCC,YAAjC,KAAqD,iBAArD,CACA,MAAOC,CAAAA,YAAP,KAAyB,4BAAzB,CACA,OAASC,aAAT,KAA8B,kBAA9B,CACA,MAAO,aAAP,CACA,MAAOC,CAAAA,MAAP,KAAmB,WAAnB,CACA,MAAOC,CAAAA,MAAP,KAAmB,WAAnB,CAEA,cAAe,SAASC,CAAAA,KAAT,CAAeC,KAAf,CAAsB,eACDT,QAAQ,CAAC,KAAD,CADP,wCAC5BU,SAD4B,eACjBC,YADiB,kCAECN,aAAa,CAAC,CAChDO,KAAK,CAAE,EADyC,CAEhDC,QAAQ,CAAE,EAFsC,CAAD,CAFd,kDAE5BC,MAF4B,oBAEpBC,iBAFoB,oBAOnC,QAASC,CAAAA,YAAT,EAAwB,CACtB,MAAOF,CAAAA,MAAM,CAACF,KAAP,CAAaK,MAAb,CAAsB,CAAtB,EAA2BH,MAAM,CAACD,QAAP,CAAgBI,MAAhB,CAAyB,CAA3D,CACD,CAED,QAAeC,CAAAA,YAAf,CAA4BC,KAA5B,wHACEA,KAAK,CAACC,cAAN,GACAT,YAAY,CAAC,IAAD,CAAZ,CAEA,GAAI,CACF;AACA;AACAU,KAAK,CAACd,MAAM,CAACe,IAAP,CAAY,YAAb,CAA2B,CAC9BC,MAAM,CAAE,MADsB,CAE9BC,OAAO,CAAE,CACP,eAAgB,kBADT,CAFqB,CAK9BC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACnBf,KAAK,CAAEE,MAAM,CAACF,KADK,CAEnBC,QAAQ,CAAEC,MAAM,CAACD,QAFE,CAAf,CALwB,CAA3B,CAAL,CASGe,IATH,CASQ,SAACC,QAAD,CAAc,CACpB,GAAIA,QAAQ,CAACC,EAAb,CAAiB,CACfD,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAqB,SAAAI,YAAY,CAAI,CACnC;AACA1B,MAAM,CAAC2B,GAAP,CAAW,OAAX,CAAoBD,YAAY,CAACE,KAAjC,EACAzB,KAAK,CAAC0B,oBAAN,CAA2B,IAA3B,EACD,CAJD,EAKD,CAND,IAMO,CACLC,KAAK,CAAC,eAAD,CAAL,CACD,CACF,CAnBD,EAoBCC,KApBD,CAoBO,SAACC,KAAD,CAAW,CAChBF,KAAK,CAACE,KAAK,CAACC,OAAP,CAAL,CACD,CAtBD,EAuBA;AACD,CAAC,MAAOC,CAAP,CAAU,CACVJ,KAAK,CAACI,CAAC,CAACD,OAAH,CAAL,CACD,CA7BD,OA6BU,CACR5B,YAAY,CAAC,KAAD,CAAZ,CACD,CACD;AApCF,8CAuCA,MACE,4BAAK,SAAS,CAAC,OAAf,EACE,gCACE,oBAAC,SAAD,EAAW,SAAS,CAAC,OAArB,CAA6B,MAAM,CAAC,OAApC,EACE,oBAAC,YAAD,cADF,CAEE,oBAAC,WAAD,EACE,SAAS,KADX,CAEE,IAAI,CAAC,OAFP,CAGE,KAAK,CAAEG,MAAM,CAACF,KAHhB,CAIE,QAAQ,CAAEG,iBAJZ,EAFF,CADF,CAUE,oBAAC,SAAD,EAAW,SAAS,CAAC,UAArB,CAAgC,MAAM,CAAC,OAAvC,EACE,oBAAC,YAAD,iBADF,CAEE,oBAAC,WAAD,EACE,KAAK,CAAED,MAAM,CAACD,QADhB,CAEE,QAAQ,CAAEE,iBAFZ,CAGE,IAAI,CAAC,UAHP,EAFF,CAVF,CAkBE,oBAAC,YAAD,EACE,KAAK,KADP,CAEE,IAAI,CAAC,QAFP,CAGE,MAAM,CAAC,OAHT,CAIE,SAAS,CAAEL,SAJb,CAKE,QAAQ,CAAE,CAACM,YAAY,EALzB,CAME,OAAO,CAAEE,YANX,UAlBF,CADF,CADF,CAiCD","sourcesContent":["import React, { useState } from \"react\";\nimport { FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport { useFormFields } from \"../libs/hooksLib\";\nimport \"./Login.css\";\nimport Cookie from \"js-cookie\";\nimport config from \"../config\";\n\nexport default function Login(props) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [fields, handleFieldChange] = useFormFields({\n    email: \"\",\n    password: \"\"\n  });\n\n  function validateForm() {\n    return fields.email.length > 0 && fields.password.length > 0;\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    try {\n      // await Auth.signIn(email, password);\n      // fields.email; fields.password --> This is what I will need to pass down the chain.\n      fetch(config.HOST+'/get-token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: fields.email,\n          password: fields.password,\n        }),\n      }).then((response) => {\n        if (response.ok) {\n          response.json().then(responseJson => {\n            // store the token in a cookie.\n            Cookie.set(\"token\", responseJson.token);\n            props.userHasAuthenticated(true);\n          })\n        } else {\n          alert(\"Login failed.\")\n        }\n      })\n      .catch((error) => {\n        alert(error.message);\n      });\n      // probably will create a state and store it in state/\n    } catch (e) {\n      alert(e.message);\n    } finally {\n      setIsLoading(false);\n    }\n    // If everything worked out fine, we should get back the JWT token and store it for further api calls.\n  }\n\n  return (\n    <div className=\"Login\">\n      <form>\n        <FormGroup controlId=\"email\" bsSize=\"large\">\n          <ControlLabel>Email</ControlLabel>\n          <FormControl\n            autoFocus\n            type=\"email\"\n            value={fields.email}\n            onChange={handleFieldChange}\n          />\n        </FormGroup>\n        <FormGroup controlId=\"password\" bsSize=\"large\">\n          <ControlLabel>Password</ControlLabel>\n          <FormControl\n            value={fields.password}\n            onChange={handleFieldChange}\n            type=\"password\"\n          />\n        </FormGroup>\n        <LoaderButton\n          block\n          type=\"submit\"\n          bsSize=\"large\"\n          isLoading={isLoading}\n          disabled={!validateForm()}\n          onClick={handleSubmit}\n        >\n          Login\n        </LoaderButton>\n      </form>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}