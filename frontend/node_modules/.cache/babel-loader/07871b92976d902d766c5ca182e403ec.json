{"ast":null,"code":"import _slicedToArray from \"/Users/skarlso/goprojects/staple/frontend/react-api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/skarlso/goprojects/staple/frontend/react-api/src/containers/Login.js\";\nimport React, { useState } from \"react\";\nimport { FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport { useFormFields } from \"../libs/hooksLib\";\nimport \"./Login.css\";\nexport default function Login(props) {\n  state = {\n    token: \"\"\n  };\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isLoading = _useState2[0],\n        setIsLoading = _useState2[1];\n\n  const _useFormFields = useFormFields({\n    email: \"\",\n    password: \"\"\n  }),\n        _useFormFields2 = _slicedToArray(_useFormFields, 2),\n        fields = _useFormFields2[0],\n        handleFieldChange = _useFormFields2[1];\n\n  function validateForm() {\n    return fields.email.length > 0 && fields.password.length > 0;\n  }\n\n  async function handleSubmit(event) {\n    // TODO: Call my API here which will get back a token.\n    event.preventDefault();\n    setIsLoading(true);\n\n    try {\n      // await Auth.signIn(email, password);\n      // fields.email; fields.password --> This is what I will need to pass down the chain.\n      fetch('http://localhost:9998/get-token/', {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: fields.username,\n          password: fields.password\n        })\n      }).then(response => response.json()).then(responseJson => {\n        console.log(\"response: \", responseJson);\n        this.setState({\n          token: response.json().token\n        });\n      }).catch(error => {\n        console.error(error);\n      });\n      props.userHasAuthenticated(true);\n      props.history.push(\"/\"); // probably will create a state and store it in state/\n    } catch (e) {\n      alert(e.message);\n    } finally {\n      setIsLoading(false);\n    } // If everything worked out fine, we should get back the JWT token and store it for further api calls.\n\n  }\n\n  return React.createElement(\"div\", {\n    className: \"Login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    controlId: \"email\",\n    bsSize: \"large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(ControlLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Email\"), React.createElement(FormControl, {\n    autoFocus: true,\n    type: \"email\",\n    value: fields.email,\n    onChange: handleFieldChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })), React.createElement(FormGroup, {\n    controlId: \"password\",\n    bsSize: \"large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(ControlLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Password\"), React.createElement(FormControl, {\n    value: fields.password,\n    onChange: handleFieldChange,\n    type: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  })), React.createElement(LoaderButton, {\n    block: true,\n    type: \"submit\",\n    bsSize: \"large\",\n    isLoading: isLoading,\n    disabled: !validateForm(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"Login\")));\n}","map":{"version":3,"sources":["/Users/skarlso/goprojects/staple/frontend/react-api/src/containers/Login.js"],"names":["React","useState","FormGroup","FormControl","ControlLabel","LoaderButton","useFormFields","Login","props","state","token","isLoading","setIsLoading","email","password","fields","handleFieldChange","validateForm","length","handleSubmit","event","preventDefault","fetch","method","headers","Accept","body","JSON","stringify","username","then","response","json","responseJson","console","log","setState","catch","error","userHasAuthenticated","history","push","e","alert","message"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport { useFormFields } from \"../libs/hooksLib\";\nimport \"./Login.css\";\n\nexport default function Login(props) {\n  state = {\n    token: \"\"\n  }\n  const [isLoading, setIsLoading] = useState(false);\n  const [fields, handleFieldChange] = useFormFields({\n    email: \"\",\n    password: \"\"\n  });  \n\n  function validateForm() {\n    return fields.email.length > 0 && fields.password.length > 0;\n  }\n\n  async function handleSubmit(event) {\n    // TODO: Call my API here which will get back a token.\n    event.preventDefault();\n    setIsLoading(true);\n\n    try {\n      // await Auth.signIn(email, password);\n      // fields.email; fields.password --> This is what I will need to pass down the chain.\n      fetch('http://localhost:9998/get-token/', {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          username: fields.username,\n          password: fields.password,\n        }),\n      }).then((response) => response.json())\n      .then((responseJson) => {\n        console.log(\"response: \", responseJson)\n        this.setState({token: response.json().token})\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n      props.userHasAuthenticated(true);\n      props.history.push(\"/\");\n      // probably will create a state and store it in state/\n    } catch (e) {\n      alert(e.message);\n    } finally {\n      setIsLoading(false);\n    }\n    // If everything worked out fine, we should get back the JWT token and store it for further api calls.\n  }\n\n  return (\n    <div className=\"Login\">\n      <form onSubmit={handleSubmit}>\n        <FormGroup controlId=\"email\" bsSize=\"large\">\n          <ControlLabel>Email</ControlLabel>\n          <FormControl\n            autoFocus\n            type=\"email\"\n            value={fields.email}\n            onChange={handleFieldChange}\n          />\n        </FormGroup>\n        <FormGroup controlId=\"password\" bsSize=\"large\">\n          <ControlLabel>Password</ControlLabel>\n          <FormControl\n            value={fields.password}\n            onChange={handleFieldChange}\n            type=\"password\"\n          />\n        </FormGroup>\n        <LoaderButton\n          block\n          type=\"submit\"\n          bsSize=\"large\"\n          isLoading={isLoading}\n          disabled={!validateForm()}\n        >\n          Login\n        </LoaderButton>\n      </form>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}