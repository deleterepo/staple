{"ast":null,"code":"import _slicedToArray from \"/Users/skarlso/goprojects/staple/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/skarlso/goprojects/staple/frontend/src/containers/Login.js\";\nimport React, { useState } from \"react\";\nimport { FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport { useFormFields } from \"../libs/hooksLib\";\nimport \"./Login.css\";\nimport Cookie from \"js-cookie\";\nimport config from \"../config\";\nexport default function Login(props) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isLoading = _useState2[0],\n        setIsLoading = _useState2[1];\n\n  const _useFormFields = useFormFields({\n    email: \"\",\n    password: \"\"\n  }),\n        _useFormFields2 = _slicedToArray(_useFormFields, 2),\n        fields = _useFormFields2[0],\n        handleFieldChange = _useFormFields2[1];\n\n  function validateForm() {\n    return fields.email.length > 0 && fields.password.length > 0;\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    try {\n      // await Auth.signIn(email, password);\n      // fields.email; fields.password --> This is what I will need to pass down the chain.\n      fetch(config.HOST + '/get-token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: fields.email,\n          password: fields.password\n        })\n      }).then(response => {\n        if (response.ok) {\n          response.json().then(responseJson => {\n            // store the token in a cookie.\n            Cookie.set(\"token\", responseJson.token);\n            props.userHasAuthenticated(true);\n          });\n        } else {\n          alert(\"Login failed.\");\n        }\n      }).catch(error => {\n        alert(error.message);\n      }); // probably will create a state and store it in state/\n    } catch (e) {\n      alert(e.message);\n    } finally {\n      setIsLoading(false);\n    } // If everything worked out fine, we should get back the JWT token and store it for further api calls.\n\n  }\n\n  function resetPassword() {\n    setIsResetting(true);\n\n    try {\n      fetch(config.HOST + \"/reset\", {\n        method: 'PATCH',\n        headers: {\n          'Authorization': 'Bearer ' + Cookie.get(\"token\")\n        }\n      }).then(response => {\n        if (response.ok) {\n          setIsResetting(false);\n          Cookie.remove(\"token\");\n          props.history.push(\"/login\");\n          window.location.reload();\n        } else {\n          setIsResetting(false);\n          alert(\"Failed to reset password.\");\n        }\n      }).catch(e => {\n        alert(e.message);\n        setIsResetting(false);\n      });\n    } catch (e) {\n      alert(e);\n      setIsResetting(false);\n    }\n  }\n\n  return React.createElement(\"div\", {\n    className: \"Login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    controlId: \"email\",\n    bsSize: \"large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(ControlLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Email\"), React.createElement(FormControl, {\n    autoFocus: true,\n    type: \"email\",\n    value: fields.email,\n    onChange: handleFieldChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  })), React.createElement(FormGroup, {\n    controlId: \"password\",\n    bsSize: \"large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(ControlLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Password\"), React.createElement(FormControl, {\n    value: fields.password,\n    onChange: handleFieldChange,\n    type: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  })), React.createElement(LoaderButton, {\n    block: true,\n    type: \"info\",\n    bsSize: \"large\",\n    onClick: resetPassword,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"Reset Password\"), React.createElement(LoaderButton, {\n    block: true,\n    type: \"submit\",\n    bsSize: \"large\",\n    isLoading: isLoading,\n    disabled: !validateForm(),\n    onClick: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"Login\")));\n}","map":{"version":3,"sources":["/Users/skarlso/goprojects/staple/frontend/src/containers/Login.js"],"names":["React","useState","FormGroup","FormControl","ControlLabel","LoaderButton","useFormFields","Cookie","config","Login","props","isLoading","setIsLoading","email","password","fields","handleFieldChange","validateForm","length","handleSubmit","event","preventDefault","fetch","HOST","method","headers","body","JSON","stringify","then","response","ok","json","responseJson","set","token","userHasAuthenticated","alert","catch","error","message","e","resetPassword","setIsResetting","get","remove","history","push","window","location","reload"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport { useFormFields } from \"../libs/hooksLib\";\nimport \"./Login.css\";\nimport Cookie from \"js-cookie\";\nimport config from \"../config\";\n\nexport default function Login(props) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [fields, handleFieldChange] = useFormFields({\n    email: \"\",\n    password: \"\"\n  });\n\n  function validateForm() {\n    return fields.email.length > 0 && fields.password.length > 0;\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    try {\n      // await Auth.signIn(email, password);\n      // fields.email; fields.password --> This is what I will need to pass down the chain.\n      fetch(config.HOST+'/get-token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: fields.email,\n          password: fields.password,\n        }),\n      }).then((response) => {\n        if (response.ok) {\n          response.json().then(responseJson => {\n            // store the token in a cookie.\n            Cookie.set(\"token\", responseJson.token);\n            props.userHasAuthenticated(true);\n          })\n        } else {\n          alert(\"Login failed.\")\n        }\n      })\n      .catch((error) => {\n        alert(error.message);\n      });\n      // probably will create a state and store it in state/\n    } catch (e) {\n      alert(e.message);\n    } finally {\n      setIsLoading(false);\n    }\n    // If everything worked out fine, we should get back the JWT token and store it for further api calls.\n  }\n\n\n  function resetPassword() {\n    setIsResetting(true);\n    try {\n      fetch(config.HOST+\"/reset\", {\n        method: 'PATCH',\n        headers: {\n          'Authorization': 'Bearer ' + Cookie.get(\"token\"),\n        }\n      }).then(response => {\n        if (response.ok) {\n          setIsResetting(false);\n          Cookie.remove(\"token\");\n          props.history.push(\"/login\");\n          window.location.reload();\n        } else {\n          setIsResetting(false);\n          alert(\"Failed to reset password.\");\n        }\n      }).catch(e => {\n        alert(e.message);\n        setIsResetting(false)\n      })\n    } catch (e) {\n      alert(e);\n      setIsResetting(false);\n    }\n  }\n\n  return (\n    <div className=\"Login\">\n      <form>\n        <FormGroup controlId=\"email\" bsSize=\"large\">\n          <ControlLabel>Email</ControlLabel>\n          <FormControl\n            autoFocus\n            type=\"email\"\n            value={fields.email}\n            onChange={handleFieldChange}\n          />\n        </FormGroup>\n        <FormGroup controlId=\"password\" bsSize=\"large\">\n          <ControlLabel>Password</ControlLabel>\n          <FormControl\n            value={fields.password}\n            onChange={handleFieldChange}\n            type=\"password\"\n          />\n        </FormGroup>\n        <LoaderButton\n          block\n          type=\"info\"\n          bsSize=\"large\"\n          onClick={resetPassword}\n        >\n          Reset Password\n        </LoaderButton>\n        <LoaderButton\n          block\n          type=\"submit\"\n          bsSize=\"large\"\n          isLoading={isLoading}\n          disabled={!validateForm()}\n          onClick={handleSubmit}\n        >\n          Login\n        </LoaderButton>\n      </form>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}