{"ast":null,"code":"import _slicedToArray from \"/Users/skarlso/goprojects/staple/frontend/react-api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/skarlso/goprojects/staple/frontend/react-api/src/containers/Login.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport { useFormFields } from \"../libs/hooksLib\";\nimport \"./Login.css\";\nexport default function Login(props) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isLoading = _useState2[0],\n        setIsLoading = _useState2[1];\n\n  const _useFormFields = useFormFields({\n    email: \"\",\n    password: \"\"\n  }),\n        _useFormFields2 = _slicedToArray(_useFormFields, 2),\n        fields = _useFormFields2[0],\n        handleFieldChange = _useFormFields2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        token = _useState4[0],\n        setToken = _useState4[1];\n\n  function validateForm() {\n    return fields.email.length > 0 && fields.password.length > 0;\n  }\n\n  useEffect(() => {\n    async function handleSubmit(event) {\n      // TODO: Call my API here which will get back a token.\n      event.preventDefault();\n      setIsLoading(true);\n\n      try {\n        // await Auth.signIn(email, password);\n        // fields.email; fields.password --> This is what I will need to pass down the chain.\n        fetch('http://localhost:9998/get-token', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: fields.email,\n            password: fields.password\n          })\n        }).then(response => response.json()).then(responseJson => {\n          setToken(responseJson.token);\n        }).catch(error => {\n          console.error(error);\n        });\n        props.userHasAuthenticated(true);\n        props.history.push(\"/\"); // probably will create a state and store it in state/\n      } catch (e) {\n        alert(e.message);\n      } finally {\n        setIsLoading(false);\n      } // If everything worked out fine, we should get back the JWT token and store it for further api calls.\n      // console.log(\"Token: \", token)\n\n    }\n  }, [token]);\n  console.log(\"Token is: \", token);\n  return React.createElement(\"div\", {\n    className: \"Login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    controlId: \"email\",\n    bsSize: \"large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(ControlLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Email\"), React.createElement(FormControl, {\n    autoFocus: true,\n    type: \"email\",\n    value: fields.email,\n    onChange: handleFieldChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })), React.createElement(FormGroup, {\n    controlId: \"password\",\n    bsSize: \"large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(ControlLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Password\"), React.createElement(FormControl, {\n    value: fields.password,\n    onChange: handleFieldChange,\n    type: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  })), React.createElement(LoaderButton, {\n    block: true,\n    type: \"submit\",\n    bsSize: \"large\",\n    isLoading: isLoading,\n    disabled: !validateForm(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"Login\")));\n}","map":{"version":3,"sources":["/Users/skarlso/goprojects/staple/frontend/react-api/src/containers/Login.js"],"names":["React","useState","useEffect","FormGroup","FormControl","ControlLabel","LoaderButton","useFormFields","Login","props","isLoading","setIsLoading","email","password","fields","handleFieldChange","token","setToken","validateForm","length","handleSubmit","event","preventDefault","fetch","method","headers","body","JSON","stringify","then","response","json","responseJson","catch","error","console","userHasAuthenticated","history","push","e","alert","message","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport { useFormFields } from \"../libs/hooksLib\";\nimport \"./Login.css\";\n\nexport default function Login(props) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [fields, handleFieldChange] = useFormFields({\n    email: \"\",\n    password: \"\"\n  });\n  const [token, setToken] = useState(true);\n\n  function validateForm() {\n    return fields.email.length > 0 && fields.password.length > 0;\n  }\n\n  useEffect(() => {\n    async function handleSubmit(event) {\n      // TODO: Call my API here which will get back a token.\n      event.preventDefault();\n      setIsLoading(true);\n  \n      try {\n        // await Auth.signIn(email, password);\n        // fields.email; fields.password --> This is what I will need to pass down the chain.\n        fetch('http://localhost:9998/get-token', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            email: fields.email,\n            password: fields.password,\n          }),\n        }).then((response) => response.json())\n        .then((responseJson) => {\n          setToken(responseJson.token)\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n        props.userHasAuthenticated(true);\n        props.history.push(\"/\");\n        // probably will create a state and store it in state/\n      } catch (e) {\n        alert(e.message);\n      } finally {\n        setIsLoading(false);\n      }\n      // If everything worked out fine, we should get back the JWT token and store it for further api calls.\n      // console.log(\"Token: \", token)\n    }\n  }, [token])\n\n  console.log(\"Token is: \", token)\n  return (\n    <div className=\"Login\">\n      <form onSubmit={handleSubmit}>\n        <FormGroup controlId=\"email\" bsSize=\"large\">\n          <ControlLabel>Email</ControlLabel>\n          <FormControl\n            autoFocus\n            type=\"email\"\n            value={fields.email}\n            onChange={handleFieldChange}\n          />\n        </FormGroup>\n        <FormGroup controlId=\"password\" bsSize=\"large\">\n          <ControlLabel>Password</ControlLabel>\n          <FormControl\n            value={fields.password}\n            onChange={handleFieldChange}\n            type=\"password\"\n          />\n        </FormGroup>\n        <LoaderButton\n          block\n          type=\"submit\"\n          bsSize=\"large\"\n          isLoading={isLoading}\n          disabled={!validateForm()}\n        >\n          Login\n        </LoaderButton>\n      </form>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}