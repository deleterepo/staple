{"ast":null,"code":"import _slicedToArray from \"/Users/skarlso/goprojects/staple/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/skarlso/goprojects/staple/frontend/src/containers/Settings.js\";\nimport React, { useState } from \"react\";\nimport { Col, ControlLabel, FormControl, FormGroup, Grid, Row } from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport { useFormFields } from \"../libs/hooksLib\";\nimport config from \"../config\";\nexport default function Settings(props) {\n  const _useFormFields = useFormFields({\n    password: \"\",\n    confirmPassword: \"\"\n  }),\n        _useFormFields2 = _slicedToArray(_useFormFields, 2),\n        fields = _useFormFields2[0],\n        handleFieldChange = _useFormFields2[1];\n\n  const _useState = useState(25),\n        _useState2 = _slicedToArray(_useState, 2),\n        maxStaples = _useState2[0],\n        setMaxStaples = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isLoading = _useState4[0],\n        setIsLoading = _useState4[1];\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    try {\n      fetch(config.HOST + '/rest/api/1/user/max-staples', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          max_staples: maxStaples\n        })\n      }).then(response => {\n        if (response.status === 200) {\n          alert(`New staple count of ${maxStaples} successfully set.`);\n          window.location.reload();\n        } else {\n          alert(\"Response was: \" + response.statusText);\n        }\n      }).catch(error => {\n        alert(error.message);\n      });\n    } catch (e) {\n      alert(e.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  function validateChangePasswordForm() {\n    return fields.password.length > 0 && fields.password === fields.confirmPassword;\n  }\n\n  async function handleChangePasswordSubmit(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    try {\n      fetch(config.HOST + '/rest/api/1/user/change-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          password: fields.password\n        })\n      }).then(response => {\n        if (response.status === 200) {\n          alert(\"Please log in with your new password.\");\n          props.userHasAuthenticated(false);\n          props.history.push(\"/login\");\n        } else {\n          alert(\"Response was: \" + response.statusText);\n        }\n      }).catch(error => {\n        alert(error.message);\n      });\n    } catch (e) {\n      alert(e.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  function editMaxStaples(event) {\n    setMaxStaples(event.target.value);\n  }\n\n  function validateForm() {\n    return true;\n  }\n\n  return React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(Row, {\n    className: \"show-grid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(Col, {\n    xs: 12,\n    md: 8,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    className: \"SettingsForm\",\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    bsSize: \"large\",\n    controlId: \"storage\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(ControlLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Maximum Staples\"), React.createElement(FormControl, {\n    min: \"0\",\n    type: \"number\",\n    value: maxStaples,\n    onChange: editMaxStaples,\n    placeholder: \"Number of maximum staples to store\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  })), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), React.createElement(LoaderButton, {\n    block: true,\n    type: \"submit\",\n    bsSize: \"large\",\n    isLoading: isLoading,\n    disabled: !validateForm(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"Save\"))), React.createElement(Col, {\n    xs: 6,\n    md: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    className: \"ChangePasswordForm\",\n    onSubmit: handleChangePasswordSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    controlId: \"password\",\n    bsSize: \"large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(ControlLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \"New password\"), React.createElement(FormControl, {\n    type: \"password\",\n    value: fields.password,\n    onChange: handleFieldChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  })), React.createElement(FormGroup, {\n    controlId: \"confirmPassword\",\n    bsSize: \"large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(ControlLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, \"Confirm new password\"), React.createElement(FormControl, {\n    type: \"password\",\n    onChange: handleFieldChange,\n    value: fields.confirmPassword,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  })), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }), React.createElement(LoaderButton, {\n    block: true,\n    type: \"submit\",\n    bsSize: \"large\",\n    isLoading: isLoading,\n    disabled: !validateChangePasswordForm(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \"Change\")))));\n}","map":{"version":3,"sources":["/Users/skarlso/goprojects/staple/frontend/src/containers/Settings.js"],"names":["React","useState","Col","ControlLabel","FormControl","FormGroup","Grid","Row","LoaderButton","useFormFields","config","Settings","props","password","confirmPassword","fields","handleFieldChange","maxStaples","setMaxStaples","isLoading","setIsLoading","handleSubmit","event","preventDefault","fetch","HOST","method","headers","body","JSON","stringify","max_staples","then","response","status","alert","window","location","reload","statusText","catch","error","message","e","validateChangePasswordForm","length","handleChangePasswordSubmit","userHasAuthenticated","history","push","editMaxStaples","target","value","validateForm"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {Col, ControlLabel, FormControl, FormGroup, Grid, Row} from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport {useFormFields} from \"../libs/hooksLib\";\nimport config from \"../config\";\n\nexport default function Settings(props) {\n  const [fields, handleFieldChange] = useFormFields({\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const [maxStaples, setMaxStaples] = useState(25);\n  const [isLoading, setIsLoading] = useState(false);\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    try {\n      fetch(config.HOST+'/rest/api/1/user/max-staples', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          max_staples: maxStaples,\n        }),\n      }).then((response) => {\n        if (response.status === 200) {\n          alert(`New staple count of ${maxStaples} successfully set.`);\n          window.location.reload();\n        } else {\n          alert(\"Response was: \" + response.statusText);\n        }\n      }).catch((error) => {\n        alert(error.message);\n      })\n    } catch (e) {\n      alert(e.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  function validateChangePasswordForm() {\n    return (\n      fields.password.length > 0 &&\n      fields.password === fields.confirmPassword\n    );\n  }\n\n  async function handleChangePasswordSubmit(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    try {\n      fetch(config.HOST+'/rest/api/1/user/change-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          password: fields.password,\n        }),\n      }).then((response) => {\n        if (response.status === 200) {\n          alert(\"Please log in with your new password.\");\n          props.userHasAuthenticated(false);\n          props.history.push(\"/login\");\n        } else {\n          alert(\"Response was: \" + response.statusText);\n        }\n      }).catch((error) => {\n        alert(error.message);\n      })\n    } catch (e) {\n      alert(e.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  function editMaxStaples(event) {\n    setMaxStaples(event.target.value)\n  }\n\n  function validateForm() {\n    return true\n  }\n\n  return (\n    <Grid>\n      <Row className=\"show-grid\">\n        <Col xs={12} md={8}>\n          <form className=\"SettingsForm\" onSubmit={handleSubmit}>\n            <FormGroup bsSize=\"large\" controlId=\"storage\">\n              <ControlLabel>Maximum Staples</ControlLabel>\n              <FormControl\n                min=\"0\"\n                type=\"number\"\n                value={maxStaples}\n                onChange={editMaxStaples}\n                placeholder=\"Number of maximum staples to store\"\n              />\n            </FormGroup>\n            <hr />\n            <LoaderButton\n              block\n              type=\"submit\"\n              bsSize=\"large\"\n              isLoading={isLoading}\n              disabled={!validateForm()}\n            >\n              Save\n            </LoaderButton>\n          </form>\n        </Col>\n        <Col xs={6} md={4}>\n          <form className=\"ChangePasswordForm\" onSubmit={handleChangePasswordSubmit}>\n            <FormGroup controlId=\"password\" bsSize=\"large\">\n              <ControlLabel>New password</ControlLabel>\n              <FormControl\n                type=\"password\"\n                value={fields.password}\n                onChange={handleFieldChange}\n              />\n            </FormGroup>\n            <FormGroup controlId=\"confirmPassword\" bsSize=\"large\">\n              <ControlLabel>Confirm new password</ControlLabel>\n              <FormControl\n                type=\"password\"\n                onChange={handleFieldChange}\n                value={fields.confirmPassword}\n              />\n            </FormGroup>\n            <hr />\n            <LoaderButton\n              block\n              type=\"submit\"\n              bsSize=\"large\"\n              isLoading={isLoading}\n              disabled={!validateChangePasswordForm()}\n            >\n              Change\n            </LoaderButton>\n          </form>\n        </Col>\n      </Row>\n    </Grid>\n  );\n}"]},"metadata":{},"sourceType":"module"}