{"ast":null,"code":"import _regeneratorRuntime from\"/Users/skarlso/goprojects/staple/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _slicedToArray from\"/Users/skarlso/goprojects/staple/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import\"./ResetPassword.css\";import config from\"../config\";import{ControlLabel,FormControl,FormGroup,HelpBlock}from\"react-bootstrap\";import LoaderButton from\"../components/LoaderButton\";export default function ResetPassword(props){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isVerifying=_useState2[0],setIsVerifying=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isLoading=_useState4[0],setIsLoading=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),email=_useState6[0],setEmail=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),code=_useState8[0],setCode=_useState8[1];function validateForm(){return email.length>0;}function validateConfirmationForm(){return code.length>0;}function handleSubmit(event){return _regeneratorRuntime.async(function handleSubmit$(_context){while(1){switch(_context.prev=_context.next){case 0:event.preventDefault();setIsLoading(true);try{fetch(config.HOST+'/reset',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email:email})}).then(function(response){if(response.status===200){setIsVerifying(true);}else{alert(\"Response was: \"+response.statusText);}}).catch(function(error){alert(error.message);});}catch(e){alert(e.message);}finally{setIsLoading(false);}case 3:case\"end\":return _context.stop();}}});}function handleConfirmationSubmit(event){return _regeneratorRuntime.async(function handleConfirmationSubmit$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:event.preventDefault();setIsLoading(true);try{fetch(config.HOST+'/verify',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email:email,code:code})}).then(function(response){if(response.status===200){alert(\"Please log in with your new password.\");setIsVerifying(false);props.history.push(\"/\");}else{alert(\"Confirmation code did not match.\");}}).catch(function(error){alert(error.message);});}catch(e){alert(e.message);}finally{setIsLoading(false);}case 3:case\"end\":return _context2.stop();}}});}function renderConfirmationForm(){return React.createElement(\"form\",{onSubmit:handleConfirmationSubmit},React.createElement(FormGroup,{controlId:\"confirmationCode\",bsSize:\"large\"},React.createElement(ControlLabel,null,\"Confirmation Code\"),React.createElement(FormControl,{autoFocus:true,type:\"text\",onChange:setCodeField,value:code}),React.createElement(HelpBlock,null,\"Please check your email for the code.\")),React.createElement(LoaderButton,{block:true,type:\"submit\",bsSize:\"large\",isLoading:isLoading,disabled:!validateConfirmationForm()},\"Verify\"));}function setEmailField(event){setEmail(event.target.value);}function setCodeField(event){setCode(event.target.value);}function renderForm(){return React.createElement(\"form\",{onSubmit:handleSubmit},React.createElement(FormGroup,{controlId:\"email\",bsSize:\"large\"},React.createElement(ControlLabel,null,\"Email\"),React.createElement(FormControl,{autoFocus:true,type:\"email\",value:email,onChange:setEmailField})),React.createElement(LoaderButton,{block:true,type:\"submit\",bsSize:\"large\",isLoading:isLoading,disabled:!validateForm()},\"Reset Password\"));}return React.createElement(\"div\",{className:\"ResetPassword\"},isVerifying?renderConfirmationForm():renderForm());}","map":{"version":3,"sources":["/Users/skarlso/goprojects/staple/frontend/src/containers/ResetPassword.js"],"names":["React","useState","config","ControlLabel","FormControl","FormGroup","HelpBlock","LoaderButton","ResetPassword","props","isVerifying","setIsVerifying","isLoading","setIsLoading","email","setEmail","code","setCode","validateForm","length","validateConfirmationForm","handleSubmit","event","preventDefault","fetch","HOST","method","headers","body","JSON","stringify","then","response","status","alert","statusText","catch","error","message","e","handleConfirmationSubmit","history","push","renderConfirmationForm","setCodeField","setEmailField","target","value","renderForm"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport \"./ResetPassword.css\";\nimport config from \"../config\";\nimport {ControlLabel, FormControl, FormGroup, HelpBlock} from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\n\nexport default function ResetPassword(props) {\n  const [isVerifying, setIsVerifying] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [email, setEmail] = useState('');\n  const [code, setCode] = useState('');\n\n  function validateForm() {\n    return email.length > 0;\n  }\n\n  function validateConfirmationForm() {\n    return code.length > 0;\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n\n    setIsLoading(true);\n\n    try {\n      fetch(config.HOST+'/reset', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: email,\n        }),\n      }).then((response) => {\n        if (response.status === 200) {\n          setIsVerifying(true);\n        } else {\n          alert(\"Response was: \" + response.statusText);\n        }\n      }).catch((error) => {\n          alert(error.message);\n      })\n    } catch (e) {\n      alert(e.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  async function handleConfirmationSubmit(event) {\n    event.preventDefault();\n\n    setIsLoading(true);\n\n    try {\n      fetch(config.HOST+'/verify', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: email,\n          code: code,\n        }),\n      }).then((response) => {\n        if (response.status === 200) {\n          alert(\"Please log in with your new password.\");\n          setIsVerifying(false);\n          props.history.push(\"/\");\n        } else {\n          alert(\"Confirmation code did not match.\");\n        }\n      }).catch((error) => {\n        alert(error.message);\n      });\n    } catch (e) {\n      alert(e.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  function renderConfirmationForm() {\n    return (\n      <form onSubmit={handleConfirmationSubmit}>\n        <FormGroup controlId=\"confirmationCode\" bsSize=\"large\">\n          <ControlLabel>Confirmation Code</ControlLabel>\n          <FormControl\n            autoFocus\n            type=\"text\"\n            onChange={setCodeField}\n            value={code}\n          />\n          <HelpBlock>Please check your email for the code.</HelpBlock>\n        </FormGroup>\n        <LoaderButton\n          block\n          type=\"submit\"\n          bsSize=\"large\"\n          isLoading={isLoading}\n          disabled={!validateConfirmationForm()}\n        >\n          Verify\n        </LoaderButton>\n      </form>\n    );\n  }\n\n  function setEmailField(event) {\n    setEmail(event.target.value)\n  }\n\n  function setCodeField(event) {\n    setCode(event.target.value)\n  }\n\n  function renderForm() {\n    return (\n      <form onSubmit={handleSubmit}>\n        <FormGroup controlId=\"email\" bsSize=\"large\">\n          <ControlLabel>Email</ControlLabel>\n          <FormControl\n            autoFocus\n            type=\"email\"\n            value={email}\n            onChange={setEmailField}\n          />\n        </FormGroup>\n        <LoaderButton\n          block\n          type=\"submit\"\n          bsSize=\"large\"\n          isLoading={isLoading}\n          disabled={!validateForm()}\n        >\n          Reset Password\n        </LoaderButton>\n      </form>\n    );\n  }\n  return (\n    <div className=\"ResetPassword\">\n      {isVerifying ? renderConfirmationForm() : renderForm()}\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}