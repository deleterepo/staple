{"ast":null,"code":"import _slicedToArray from \"/Users/skarlso/goprojects/staple/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/skarlso/goprojects/staple/frontend/src/containers/Signup.js\";\nimport React, { useState } from \"react\";\nimport { FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport { useFormFields } from \"../libs/hooksLib\";\nimport \"./Signup.css\";\nimport config from \"../config\";\nimport Cookie from \"js-cookie\";\nexport default function Signup(props) {\n  const _useFormFields = useFormFields({\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n  }),\n        _useFormFields2 = _slicedToArray(_useFormFields, 2),\n        fields = _useFormFields2[0],\n        handleFieldChange = _useFormFields2[1];\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        newUser = _useState2[0],\n        setNewUser = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isLoading = _useState4[0],\n        setIsLoading = _useState4[1];\n\n  function validateForm() {\n    return fields.email.length > 0 && fields.password.length > 0 && fields.password === fields.confirmPassword;\n  }\n\n  function getToken() {\n    try {\n      fetch(config.HOST + '/get-token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: fields.email,\n          password: fields.password\n        })\n      }).then(response => {\n        if (response.ok) {\n          response.json().then(responseJson => {\n            // store the token in a cookie.\n            Cookie.set(\"token\", responseJson.token);\n          });\n        } else {\n          alert(\"Login failed.\");\n        }\n      }).catch(error => {\n        alert(error.message);\n      }); // probably will create a state and store it in state/\n    } catch (e) {\n      alert(e.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    try {\n      fetch(config.HOST + '/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: fields.email,\n          password: fields.password\n        })\n      }).then(response => {\n        if (response.status === 200) {\n          getToken();\n          setNewUser(newUser);\n          props.userHasAuthenticated(true);\n          props.history.push(\"/\");\n        } else {\n          alert(\"Response was: \" + response.statusText);\n        }\n      }).catch(error => {\n        alert(error.message);\n      });\n    } catch (e) {\n      alert(e.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  function renderForm() {\n    return React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      controlId: \"email\",\n      bsSize: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(ControlLabel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Email\"), React.createElement(FormControl, {\n      autoFocus: true,\n      type: \"email\",\n      value: fields.email,\n      onChange: handleFieldChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      controlId: \"password\",\n      bsSize: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(ControlLabel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Password\"), React.createElement(FormControl, {\n      type: \"password\",\n      value: fields.password,\n      onChange: handleFieldChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      controlId: \"confirmPassword\",\n      bsSize: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(ControlLabel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Confirm Password\"), React.createElement(FormControl, {\n      type: \"password\",\n      onChange: handleFieldChange,\n      value: fields.confirmPassword,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    })), React.createElement(LoaderButton, {\n      block: true,\n      type: \"submit\",\n      bsSize: \"large\",\n      isLoading: isLoading,\n      disabled: !validateForm(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Signup\"));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"Signup\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, renderForm());\n}","map":{"version":3,"sources":["/Users/skarlso/goprojects/staple/frontend/src/containers/Signup.js"],"names":["React","useState","FormGroup","FormControl","ControlLabel","LoaderButton","useFormFields","config","Cookie","Signup","props","email","password","confirmPassword","fields","handleFieldChange","newUser","setNewUser","isLoading","setIsLoading","validateForm","length","getToken","fetch","HOST","method","headers","body","JSON","stringify","then","response","ok","json","responseJson","set","token","alert","catch","error","message","e","handleSubmit","event","preventDefault","status","userHasAuthenticated","history","push","statusText","renderForm"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  FormGroup,\n  FormControl,\n  ControlLabel\n} from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport { useFormFields } from \"../libs/hooksLib\";\nimport \"./Signup.css\";\nimport config from \"../config\";\nimport Cookie from \"js-cookie\";\n\nexport default function Signup(props) {\n  const [fields, handleFieldChange] = useFormFields({\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const [newUser, setNewUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  function validateForm() {\n    return (\n      fields.email.length > 0 &&\n      fields.password.length > 0 &&\n      fields.password === fields.confirmPassword\n    );\n  }\n\n  function getToken() {\n    try {\n      fetch(config.HOST+'/get-token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: fields.email,\n          password: fields.password,\n        }),\n      }).then((response) => {\n        if (response.ok) {\n          response.json().then(responseJson => {\n            // store the token in a cookie.\n            Cookie.set(\"token\", responseJson.token);\n          })\n        } else {\n          alert(\"Login failed.\")\n        }\n      })\n        .catch((error) => {\n          alert(error.message);\n        });\n      // probably will create a state and store it in state/\n    } catch (e) {\n      alert(e.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n  \n    setIsLoading(true);\n  \n    try {\n      fetch(config.HOST+'/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: fields.email,\n          password: fields.password,\n        }),\n      }).then((response) => {\n        if (response.status === 200) {\n          getToken();\n          setNewUser(newUser);\n          props.userHasAuthenticated(true);\n          props.history.push(\"/\");\n        } else {\n          alert(\"Response was: \" + response.statusText);\n        }\n      })\n        .catch((error) => {\n          alert(error.message);\n        })\n    } catch (e) {\n      alert(e.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  function renderForm() {\n    return (\n      <form onSubmit={handleSubmit}>\n        <FormGroup controlId=\"email\" bsSize=\"large\">\n          <ControlLabel>Email</ControlLabel>\n          <FormControl\n            autoFocus\n            type=\"email\"\n            value={fields.email}\n            onChange={handleFieldChange}\n          />\n        </FormGroup>\n        <FormGroup controlId=\"password\" bsSize=\"large\">\n          <ControlLabel>Password</ControlLabel>\n          <FormControl\n            type=\"password\"\n            value={fields.password}\n            onChange={handleFieldChange}\n          />\n        </FormGroup>\n        <FormGroup controlId=\"confirmPassword\" bsSize=\"large\">\n          <ControlLabel>Confirm Password</ControlLabel>\n          <FormControl\n            type=\"password\"\n            onChange={handleFieldChange}\n            value={fields.confirmPassword}\n          />\n        </FormGroup>\n        <LoaderButton\n          block\n          type=\"submit\"\n          bsSize=\"large\"\n          isLoading={isLoading}\n          disabled={!validateForm()}\n        >\n          Signup\n        </LoaderButton>\n      </form>\n    );\n  }\n\n  return (\n    <div className=\"Signup\">\n      {renderForm()}\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}